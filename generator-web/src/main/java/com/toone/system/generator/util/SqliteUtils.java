package com.toone.system.generator.util;import lombok.extern.slf4j.Slf4j;import org.springframework.util.ResourceUtils;import java.io.*;import java.sql.Connection;import java.sql.SQLException;import java.util.stream.Collectors;@Slf4jpublic class SqliteUtils {    /**     * 初始化项目db     *     * @param connection     */    public static void initProDb(Connection connection) {        //判断数据表是否存在        boolean hasPro = false;        try {            hasPro = true;            //测试数据表是否存在            connection.prepareStatement("select * from db_files").execute();        } catch (SQLException e) {            //不存在            log.debug("table pro is not exist");            hasPro = false;        }        //不存在时创建db        if (!hasPro) {            log.debug(">>>start init pro db");//            File file = null;//            try {//                //读取初始化数据sql//                file = ResourceUtils.getFile("classpath::resources/statics/sqlite/init.sql");//            } catch (FileNotFoundException e) {//                log.error("获取init.sql失败", e);//                return;//            }            String sql = ""; //FileUtil.getContent(new File("statics/sqlite/init.sql").getPath());            try (InputStream inputStream = SqliteUtils.class.getClassLoader().getResourceAsStream("statics/sqlite/init.sql")) {                if (inputStream != null) {                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {                        sql = reader.lines().collect(Collectors.joining(System.lineSeparator()));                    }                }            } catch (Exception e) {                log.error("获取模板信息异常：{},{}", "statics/sqlite/init.sql", e.getMessage(), e);            }            //分割sql            String[] sqls = sql.split(";");            try {                for (String str : sqls) {                    //开始初始化数据库                    connection.setAutoCommit(false);                    connection.prepareStatement(str).execute();                }                //提交sql                connection.commit();            } catch (SQLException e) {                e.printStackTrace();            } finally {                try {                    connection.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }            log.debug("finish init pro db>>>");        } else {            log.debug("pro db is exist");        }    }    public static void initDb(Connection connection, String... sqls) {        log.debug(">>>start initDb:{}", sqls);        try {            for (String str : sqls) {                connection.setAutoCommit(false);                connection.prepareStatement(str).execute();            }            connection.commit();        } catch (SQLException e) {            e.printStackTrace();        } finally {            try {                connection.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        log.debug("finish initDb>>>");    }    public static void initSqliteFile(String filePath) {        File file = new File(filePath);        File dir = file.getParentFile();        if (!dir.exists()) {            dir.mkdirs();        }        if (!file.exists()) {            try {                file.createNewFile();            } catch (IOException e) {                e.printStackTrace();            }        }    }    public static String getFilePath(String url) {        url = url.replace("jdbc:sqlite:", "");        return url;    }}